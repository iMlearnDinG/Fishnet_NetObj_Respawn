using UnityEngine;
using FishNet.Object;

public class PlayerCollisionHandler : NetworkBehaviour
{
    public float forceThreshold = 10f;
    private PlayerRespawnManager respawnManager;

    private void Awake()
    {
        respawnManager = Object.FindFirstObjectByType<PlayerRespawnManager>();
        if (respawnManager == null)
        {
            Debug.LogError("PlayerRespawnManager not found in the scene.");
        }
    }

    private void OnCollisionEnter(Collision collision)
    {
        if (!IsServer || collision.gameObject.CompareTag("Player") == false)
            return;

        float collisionForce = collision.impulse.magnitude / Time.fixedDeltaTime;
        Debug.Log("Collision detected, force: " + collisionForce);

        // Check if this player is the initiator of the collision based on velocity
        Rigidbody hitPlayerRb = collision.rigidbody;
        Rigidbody thisPlayerRb = GetComponent<Rigidbody>();
        if (hitPlayerRb != null && thisPlayerRb != null && collisionForce > forceThreshold)
        {
            if (thisPlayerRb.velocity.magnitude > hitPlayerRb.velocity.magnitude)
            {
                // This player is the initiator, so do not despawn
                Debug.Log("This player is the initiator of the collision, not despawning.");
                return;
            }

            // This player is not the initiator, so trigger despawn
            NetworkObject playerNetObj = GetComponent<NetworkObject>();
            if (playerNetObj != null)
            {
                Debug.Log("Despawning player due to collision force.");
                // Before spawning the new player object, despawn the old one on the server.
            ServerManager.Despawn(playerNetObj.gameObject);

                TriggerRespawn(playerNetObj);
            }
            else
            {
                Debug.LogError("NetworkObject component not found on this player.");
            }
        }
    }

    private void TriggerRespawn(NetworkObject playerNetObj)
    {
        if (respawnManager != null && IsServer)
        {
            Debug.Log("Triggering respawn for player: " + playerNetObj.gameObject.name);

            // Destroy the old player object
            NetworkObject.Destroy(playerNetObj.gameObject);

            // Request respawn for the new player object
            respawnManager.RequestRespawnServerRpc(playerNetObj);

            // Reinitialize controls (including camera attachment)
            PlayerControls playerControls = playerNetObj.gameObject.GetComponent<PlayerControls>();
            if (playerControls != null)
            {
                playerControls.ReinitializeControls();
            }
        }
    }

}
