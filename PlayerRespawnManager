using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using FishNet.Object;
using FishNet.Connection;
using FishNet;

public class PlayerRespawnManager : NetworkBehaviour
{
    public GameObject playerPrefab;
    public Transform[] respawnPoints;
    public float respawnDelay = 3f;
    private Dictionary<int, NetworkObject> pooledPlayerObjects = new Dictionary<int, NetworkObject>();

    [ServerRpc(RequireOwnership = false)]
    public void DespawnAndRespawnServerRpc(NetworkObject playerNetObj)
    {
        Debug.Log($"[Server] DespawnAndRespawnServerRpc called for Client ID: {playerNetObj.Owner.ClientId}");

        int clientId = playerNetObj.Owner.ClientId;

        // Despawn the player object with pooling
        playerNetObj.Despawn(DespawnType.Pool);

        // Add the despawned object to the pool
        if (!pooledPlayerObjects.ContainsKey(clientId))
        {
            pooledPlayerObjects.Add(clientId, playerNetObj);
        }
        else
        {
            pooledPlayerObjects[clientId] = playerNetObj;
        }

        // Call respawn after delay
        StartCoroutine(RespawnCoroutine(clientId));
    }

    private IEnumerator RespawnCoroutine(int clientId)
    {
        yield return new WaitForSeconds(respawnDelay);

        // Check if we have a pooled object for the given client ID
        if (pooledPlayerObjects.TryGetValue(clientId, out NetworkObject pooledObject))
        {
            // Respawn the pooled player
            RespawnPooledPlayerObject(pooledObject, clientId);
        }
        else
        {
            // If no pooled object, create a new instance
            CreateAndSpawnPlayer(clientId);
        }
    }

    private void RespawnPooledPlayerObject(NetworkObject pooledObject, int clientId)
    {
        Transform respawnPoint = GetRespawnPoint();
        pooledObject.transform.position = respawnPoint.position;
        pooledObject.transform.rotation = respawnPoint.rotation;
        pooledObject.gameObject.SetActive(true);

        if (InstanceFinder.ServerManager.Clients.TryGetValue(clientId, out NetworkConnection conn))
        {
            // Spawn the object with the specific client's connection to assign ownership.
            InstanceFinder.ServerManager.Spawn(pooledObject.gameObject, conn);

            Debug.Log($"[Server] Respawned pooled player instance for Client ID: {clientId}");

            ResetPlayerStateAndAttachCamera(pooledObject.gameObject);
        }
        else
        {
            Debug.LogError($"[Server] No connection found for Client ID: {clientId}, cannot respawn pooled player object.");
        }
    }



    private void CreateAndSpawnPlayer(int clientId)
    {
        GameObject playerInstance = Instantiate(playerPrefab, GetRespawnPoint().position, GetRespawnPoint().rotation);
        NetworkObject netObj = playerInstance.GetComponent<NetworkObject>();
        if (netObj != null)
        {
            if (InstanceFinder.ServerManager.Clients.TryGetValue(clientId, out NetworkConnection conn))
            {
                // Corrected Spawn method call
                InstanceFinder.ServerManager.Spawn(playerInstance, conn);
                Debug.Log($"[Server] Spawned new player instance for Client ID: {clientId}");
            }
            else
            {
                Debug.LogError("[Server] Failed to find a connection for Client ID: " + clientId);
            }

            ResetPlayerStateAndAttachCamera(playerInstance);
        }
        else
        {
            Debug.LogError("[Server] Failed to find NetworkObject component on the instantiated player object.");
        }
    }


    private Transform GetRespawnPoint()
    {
        return respawnPoints[Random.Range(0, respawnPoints.Length)];
    }

    private void ResetPlayerStateAndAttachCamera(GameObject player)
    {
        Rigidbody rb = player.GetComponent<Rigidbody>();
        if (rb != null && !rb.isKinematic)
        {
            rb.velocity = Vector3.zero;
            rb.angularVelocity = Vector3.zero;
        }
        if (player.GetComponent<NetworkObject>().IsOwner)
        {
            AttachCameraToPlayer(player);
        }
    }

    private void AttachCameraToPlayer(GameObject player)
    {
        Camera mainCamera = Camera.main;
        if (mainCamera != null)
        {
            var cameraControl = mainCamera.GetComponent<IndependentCameraControl>() ?? mainCamera.gameObject.AddComponent<IndependentCameraControl>();
            cameraControl.playerTransform = player.transform;
            Debug.Log("Attached the camera to the player.");
        }
    }
}
